# This GUI layout was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer
# GUI design and code by Dylan Nguyen
from FitnessTracker.my_functions import *
from FitnessTracker.my_validations import *
from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path("assets/frame3")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


measure_window = Tk()

measure_window.geometry("800x600")
measure_window.title("max_rep form")
measure_window.configure(bg="#FFFFFF")
vcmd = get_vcmd(measure_window)


canvas = Canvas(
    measure_window,
    bg = "#FFFFFF",
    height = 600,
    width = 800,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
canvas.create_rectangle(
    400.0,
    0.0,
    800.0,
    600.0,
    fill="#395271",
    outline="")

canvas.create_text(
    432.0,
    11.0,
    anchor="nw",
    text="Measurements\nEntry",
    fill="#FFFFFF",
    font=("Inter Bold", 36 * -1)
)

canvas.create_text(
    432.0,
    107.0,
    anchor="nw",
    text="Day",
    fill="#FFFFFF",
    font=("Inter Medium", 20 * -1)
)

canvas.create_text(
    624.0,
    107.0,
    anchor="nw",
    text="Date ",
    fill="#FFFFFF",
    font=("Inter Medium", 20 * -1)
)

canvas.create_text(
    692.0,
    55.0,
    anchor="nw",
    text="L -> R",
    fill="#FFFFFF",
    font=("Inter Medium", 20 * -1)
)


canvas.create_text(
    432.0,
    176.0,
    anchor="nw",
    text="Bicep",
    fill="#FFFFFF",
    font=("Inter Medium", 20 * -1)
)

canvas.create_text(
    432.0,
    323.0,
    anchor="nw",
    text="Quads",
    fill="#FFFFFF",
    font=("Inter Medium", 20 * -1)
)
day_entry = Entry(
    bd=0,
    bg="#D9D9D9",
    fg="#000716",
    highlightthickness=0
)

date_entry = Entry(
    bd=0,
    bg="#D9D9D9",
    fg="#000716",
    highlightthickness=0
)

bicep_left_entry = Entry(
    bd=0,
    bg="#D9D9D9",
    fg="#000716",
    highlightthickness=0
)

bicep_right_entry = Entry(
    bd=0,
    bg="#D9D9D9",
    fg="#000716",
    highlightthickness=0
)

chest_entry = Entry(
    bd=0,
    bg="#D9D9D9",
    fg="#000716",
    highlightthickness=0
)

forearm_left_entry = Entry(
    bd=0,
    bg="#D9D9D9",
    fg="#000716",
    highlightthickness=0
)

forearm_right_entry = Entry(
    bd=0,
    bg="#D9D9D9",
    fg="#000716",
    highlightthickness=0
)

shoulder_entry = Entry(
    bd=0,
    bg="#D9D9D9",
    fg="#000716",
    highlightthickness=0
)

quad_left_entry = Entry(
    bd=0,
    bg="#D9D9D9",
    fg="#000716",
    highlightthickness=0
)

quad_right_entry = Entry(
    bd=0,
    bg="#D9D9D9",
    fg="#000716",
    highlightthickness=0
)

belly_entry = Entry(
    bd=0,
    bg="#D9D9D9",
    fg="#000716",
    highlightthickness=0
)

calf_left_entry = Entry(
    bd=0,
    bg="#D9D9D9",
    fg="#000716",
    highlightthickness=0
)


calf_right_entry = Entry(
    bd=0,
    bg="#D9D9D9",
    fg="#000716",
    highlightthickness=0
)
entry_image_1 = PhotoImage(
    file=relative_to_assets("entry_1.png"))
entry_bg_1 = canvas.create_image(
    581.5,
    436.0,
    image=entry_image_1
)

entry_image_2 = PhotoImage(
    file=relative_to_assets("entry_2.png"))
entry_bg_2 = canvas.create_image(
    476.5,
    436.0,
    image=entry_image_2
)

entry_image_3 = PhotoImage(
    file=relative_to_assets("entry_3.png"))
entry_bg_3 = canvas.create_image(
    706.5,
    366.0,
    image=entry_image_3
)

entry_image_4 = PhotoImage(
    file=relative_to_assets("entry_4.png"))
entry_bg_4 = canvas.create_image(
    581.5,
    366.0,
    image=entry_image_4
)



entry_image_5 = PhotoImage(
    file=relative_to_assets("entry_5.png"))
entry_bg_5 = canvas.create_image(
    476.5,
    366.0,
    image=entry_image_5
)



entry_image_6 = PhotoImage(
    file=relative_to_assets("entry_6.png"))
entry_bg_6 = canvas.create_image(
    706.5,
    219.0,
    image=entry_image_6
)

entry_image_7 = PhotoImage(
    file=relative_to_assets("entry_7.png"))
entry_bg_7 = canvas.create_image(
    581.5,
    219.0,
    image=entry_image_7
)


entry_image_8 = PhotoImage(
    file=relative_to_assets("entry_8.png"))
entry_bg_8 = canvas.create_image(
    476.5,
    219.0,
    image=entry_image_8
)



entry_image_9 = PhotoImage(
    file=relative_to_assets("entry_9.png"))
entry_bg_9 = canvas.create_image(
    581.5,
    289.0,
    image=entry_image_9
)



entry_image_10 = PhotoImage(
    file=relative_to_assets("entry_10.png"))
entry_bg_10 = canvas.create_image(
    476.5,
    289.0,
    image=entry_image_10
)



entry_image_11 = PhotoImage(
    file=relative_to_assets("entry_11.png"))
entry_bg_11 = canvas.create_image(
    682.0,
    152.0,
    image=entry_image_11
)



entry_image_12 = PhotoImage(
    file=relative_to_assets("entry_12.png"))
entry_bg_12 = canvas.create_image(
    491.5,
    152.0,
    image=entry_image_12
)



canvas.create_text(
    432.0,
    246.0,
    anchor="nw",
    text="Forearm",
    fill="#FFFFFF",
    font=("Inter Medium", 20 * -1)
)

entry_image_13 = PhotoImage(
    file=relative_to_assets("entry_13.png"))
entry_bg_13 = canvas.create_image(
    707.0,
    289.0,
    image=entry_image_13
)



canvas.create_text(
    655.0,
    246.0,
    anchor="nw",
    text="Shoulder",
    fill="#FFFFFF",
    font=("Inter Medium", 20 * -1)
)

canvas.create_text(
    432.0,
    393.0,
    anchor="nw",
    text="Calves",
    fill="#FFFFFF",
    font=("Inter Medium", 20 * -1)
)

canvas.create_text(
    655.0,
    176.0,
    anchor="nw",
    text="Chest",
    fill="#FFFFFF",
    font=("Inter Medium", 20 * -1)
)

canvas.create_text(
    655.0,
    323.0,
    anchor="nw",
    text="Belly",
    fill="#FFFFFF",
    font=("Inter Medium", 20 * -1)
)

image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    200.0,
    300.0,
    image=image_image_1
)

button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
measure_submit_button = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: [print("measure submit clicked"), get_data()],
    relief="flat"
)

def get_data():
    if validate_empty(bicep_left_entry.get(), bicep_right_entry.get(), chest_entry.get(), forearm_left_entry.get(),
                      forearm_right_entry.get(), quad_left_entry.get(), quad_right_entry.get(), belly_entry.get(),
                      calf_left_entry.get(), calf_right_entry.get()) == 1:
        messagebox.showerror("Error", "No Null Values,\nplease and thank you!")
    else:
        response = messagebox.askyesno("Confirm",
                                       f'Bicep: {bicep_left_entry.get()}, {bicep_right_entry.get()} | Chest: {chest_entry.get()}'
                                       f'\nForearm: {forearm_left_entry.get()}, {forearm_right_entry.get()} | Shoulder: {shoulder_entry.get()} '
                                       f'\nLegs: {quad_left_entry.get()}, {quad_right_entry.get()} | Belly: {belly_entry.get()} '
                                       f'\nCalves: {calf_left_entry.get()}, {calf_right_entry.get()}'     
                                       f'\nCorrect?')

        if response:  # If user clicks "Yes"
            print(f'{date_entry.get()} | {day_entry.get()}  \nbicep_l: {bicep_left_entry.get()} | bicep_r: {bicep_right_entry.get()} | chest: {chest_entry.get()}'
                  f'\nforearm_l: {forearm_left_entry.get()} | forearm_r: {forearm_right_entry.get()} | shoulder: {shoulder_entry.get()} '
                  f'\nleg_l: {quad_left_entry.get()} | leg_r: {quad_right_entry.get()} | belly: {belly_entry.get()}'
                  f'\ncalves_l: {calf_left_entry.get()} | calves_r: {calf_right_entry.get()}')
            measure(bicep_left_entry.get(), bicep_right_entry.get(), chest_entry.get(), forearm_left_entry.get(),
                    forearm_right_entry.get(), shoulder_entry.get(), quad_left_entry.get(), quad_right_entry.get(), belly_entry.get(),
                    calf_left_entry.get(), calf_right_entry.get())
            messagebox.showinfo("Success", "Bidding accomplished!")
            measure_window.destroy()

        else:  # If user clicks "No"
            print(f'aborted')
            messagebox.showinfo("Cancelled", "Action cancelled!")


# Validation
bicep_left_entry.config(validate="key", validatecommand=vcmd["float"])
bicep_right_entry.config(validate="key", validatecommand=vcmd["float"])
chest_entry.config(validate="key", validatecommand=vcmd["float"])
forearm_left_entry.config(validate="key", validatecommand=vcmd["float"])
forearm_right_entry.config(validate="key", validatecommand=vcmd["float"])
shoulder_entry.config(validate="key", validatecommand=vcmd["float"])
quad_left_entry.config(validate="key", validatecommand=vcmd["float"])
quad_right_entry.config(validate="key", validatecommand=vcmd["float"])
belly_entry.config(validate="key", validatecommand=vcmd["float"])
calf_left_entry.config(validate="key", validatecommand=vcmd["float"])
calf_right_entry.config(validate="key", validatecommand=vcmd["float"])

# Place all widgets at the bottom
day_entry.place(x=432.0, y=138.0, width=119.0, height=26.0)
date_entry.place(x=624.0, y=138.0, width=116.0, height=26.0)
bicep_left_entry.place(x=432.0, y=205.0, width=89.0, height=26.0)
bicep_right_entry.place(x=537.0, y=205.0, width=89.0, height=26.0)
chest_entry.place(x=655.0, y=205.0, width=103.0, height=26.0)
forearm_left_entry.place(x=432.0, y=275.0, width=89.0, height=26.0)
forearm_right_entry.place(x=537.0, y=275.0, width=89.0, height=26.0)
shoulder_entry.place(x=655.0, y=275.0, width=104.0, height=26.0)
quad_left_entry.place(x=432.0, y=352.0, width=89.0, height=26.0)
quad_right_entry.place(x=537.0, y=352.0, width=89.0, height=26.0)
belly_entry.place(x=655.0, y=352.0, width=103.0, height=26.0)
calf_left_entry.place(x=432.0, y=422.0, width=89.0, height=26.0)
calf_right_entry.place(x=537.0, y=422.0, width=89.0, height=26.0)
measure_submit_button.place(x=474.0, y=470.0, width=240.0, height=80.0)

day_entry.delete(0, "end")
day_entry.insert(0, count_day())
day_entry.config(state="readonly")

date_entry.delete(0, "end")
date_entry.insert(0, todays_date())
date_entry.config(state="readonly")

measure_window.resizable(False, False)
measure_window.mainloop()
